{"version":3,"sources":["components/hoc/with-service.js","components/service-context/index.js","utils/getHoursAgo.js","components/side-bar/index.js","components/side-bar/side-bar.js","components/jumbotron/categories.js","components/joke-box/index.js","components/joke-box/joke-box.js","components/jumbotron/search.js","components/jumbotron/index.js","components/jumbotron/jumbotron.js","components/app/index.js","components/app/app.js","index.js","services/chuckNorrisService.js"],"names":["Wrapped","React","createContext","Provider","Consumer","getHoursAgo","stringDate","date","Date","Math","floor","getTime","SideBar","state","genres","wrapperRef","createRef","onToggle","current","classList","toggle","this","props","onGenreClick","ref","className","onClick","Component","Categories","categories","onCategoryClicked","disabled","useState","id","category","setCategory","categoryId","handleClick","target","map","element","index","key","JokeBox","joke","activeCategory","value","hoursAgo","href","Search","handleChange","label","setLabel","type","placeholder","onChange","Jumbotron","service","onHandleClick","setJoke","checkView","setCheckView","setCategories","setActiveCategory","getCategories","getRandomJoke","getJokeByCategory","getJokeBySearch","useEffect","console","log","fetchJoke","fetchCategories","then","data","slice","getData","args","length","name","e","innerHTML","App","ReactDOM","render","StrictMode","_apiBase","getResource","url","a","fetch","response","json","_transformData","updated_at","icon","icon_url","res","query","document","getElementById"],"mappings":"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","file":"static/js/main.9ffde732.chunk.js","sourcesContent":["import React from 'react';\nimport { Consumer } from '../service-context';\n\nconst withService = () => (Wrapped) => {\n    return (props) => { \n        return (\n            <Consumer>\n                {\n                    (value) => {\n                        return <Wrapped {...props} service={value} />\n                    }\n                }\n            </Consumer>\n        );\n    }\n}\n\nexport {\n    withService\n}\n\n","import React from 'react';\n\nconst { Provider, Consumer } = React.createContext();\n\nexport { \n    Provider, \n    Consumer \n}","export const getHoursAgo = (stringDate) => {\n  \n    const date = new Date(stringDate);\n\n    const currentHoursFrom1970 = Math.floor(new Date().getTime()/1000/3600);\n    const customHoursFrom1970 = Math.floor(date.getTime()/1000/3600);\n   \n    return currentHoursFrom1970 - customHoursFrom1970;\n   \n }","import SideBar from './side-bar';\n\nexport default SideBar;","import React, { Component } from 'react';\n\nimport './side-bar.css';\n\nclass SideBar extends Component {\n\n    state = {\n        genres: [\"fantasy\", \"science fiction\", \"novel\", \"legend\", \"criminal\"],\n    }\n\n    wrapperRef = React.createRef();\n\n    onToggle = () => {\n        const wrapper = this.wrapperRef.current;\n        wrapper.classList.toggle('is-nav-open');\n    }\n\n    render () {                    \n\n        const { onGenreClick } = this.props;\n        const { genres } = this.state;\n\n        return (\n            <div ref={this.wrapperRef} className=\"wrapper\">\n                <div className=\"side-bar\">\n                        <div className=\"side-bar-content\">\n                            <span className=\"head\">Genres</span>\n                            <ul className=\"head-list\">\n                            </ul>\n                        </div>\n                        <i onClick={this.onToggle} className=\"toggler fas fa-hamburger\"></i>\n                </div>\n            </div>\n        );    \n    }\n}\n\nexport default SideBar;\n    ","import React, { useState, useEffect } from 'react';\n\nimport './jumbotron.css';\n\nconst Categories = ({categories = [], onCategoryClicked, disabled = false}) => {\n\n    const [category, setCategory] = useState({id: \"category\"});\n    const categoryId = disabled ? \"category-disabled\" : \"category\";\n    \n    // useEffect(() => {\n    //     return () => {\n    //         const initialValue = {id: \"category\"};\n    //         setCategory(initialValue);\n    //     }\n    // }, [])\n\n\n    const handleClick = ({target}) => {\n        if (!disabled) {\n            category.id = 'category';\n            target.id='category-active';\n            onCategoryClicked(target);\n            setCategory(target);       \n        }\n    }\n\n    return (\n        <div className=\"categories-wrap\">\n            {\n            categories.map((element, index) => {\n                    return (\n                        <span \n                        key={index} \n                        id={categoryId}\n                        onClick={handleClick}> \n                            {element}\n                        </span>\n                    );\n                })\n            }                \n        </div>\n    );\n}\n\nexport default Categories;\n\n","import JokeBox from './joke-box';\n\nexport default JokeBox;","import React, { useState } from 'react';\nimport { withService } from '../hoc';\n\nimport Categories from '../jumbotron/categories';\nimport './joke-box.css';\n\nconst JokeBox = ({joke, activeCategory}) => {\n\n    const { id, value, hoursAgo, categories} = joke;\n\n    return (\n        <div className=\"wrap-box\">\n            <div className=\"joke-box\">\n                <span id=\"secondary-text\">\n                    ID: <a href=\"/\">\n                            {id}\n                        </a>\n                </span>\n                <p>\n                    {value}\n                </p>\n                <div className=\"bottom-line\">\n                    <div className=\"secondary-text-wrap\">\n                        <span id=\"secondary-text\">\n                            Last update: {hoursAgo} hours ago\n                        </span>\n                    </div>\n                    <Categories categories={activeCategory} disabled={true} />\n                </div> \n            </div>\n            <i className=\"message-icon far fa-comment-alt\"></i>\n            <i \n            className=\"heart-icon far fa-heart\"\n            onClick={()=>{}}>\n            </i>\n        </div>\n    );\n}\n\nexport default JokeBox;\n\n","import React, { useState } from 'react';\n\nimport './jumbotron.css';\n\nconst Search = ({handleChange}) => {\n\n    const [ label, setLabel ] = useState('');\n\n    const handler = ({target: {value}}) => {\n        handleChange(value)\n        setLabel(value);\n    }\n\n    return (\n        <input \n        className=\"search-input\"  \n        type=\"search\" \n        placeholder=\"Free text search...\"\n        value={label} \n        onChange={handler}>\n        </input>\n    );\n}\n\nexport default Search;\n\n","import Jumbotron from './jumbotron';\nimport Categories from './categories';\nimport Search from './search';\n\nexport default Jumbotron;\nexport {\n    Categories, Search\n}","import React, { useState, useEffect } from 'react';\n\nimport './jumbotron.css';\n\nimport { withService } from '../hoc';\nimport JokeBox from '../joke-box';\nimport Categories from './categories';\nimport Search from './search';\nimport { act } from 'react-dom/test-utils';\n\nconst Jumbotron = ({service, onHandleClick}) => {\n\n    const [joke, setJoke] = useState('');\n    const [checkView, setCheckView] = useState('');\n    const [categories, setCategories] = useState([]);\n    const [activeCategory, setActiveCategory] = useState([]);\n    const [label, setLabel] = useState('');\n\n    const { getCategories, getRandomJoke, getJokeByCategory, getJokeBySearch } = service;\n    \n    useEffect(() => {\n        console.log('componentDidMount');\n        fetchJoke();\n        fetchCategories();\n    }, []) \n\n    const fetchCategories = () => {\n        getCategories().then(data => setCategories(data.slice(0,8)));\n    } \n\n    const fetchJoke = (...args) => {\n\n        let getData = getRandomJoke;\n\n        if (activeCategory.length > 0) {\n            getData = getJokeByCategory;\n            args[0] = activeCategory[0];\n        }\n        \n        if (label !== '') {\n            getData = getJokeBySearch;\n            args[0] = label;\n        } \n\n        getData(...args)\n        .then((data) => {\n            console.log(data);\n            setJoke(data);\n        });\n\n        setLabel('');\n\n    }\n\n    return (\n        <div className=\"jumbotron\">\n            <span id=\"logo\">MSI 2020</span>\n            <h1>Hey!</h1>\n            <h2>Let’s try to find a joke for you:</h2>\n\n            <div className=\"form-check\">\n                <label className=\"form-check-label\">\n                    <input type=\"radio\" className=\"form-check-input\" name=\"optionsRadios\" id=\"optionsRadios1\" value=\"random\"\n                    onChange={(e) => setCheckView(e.target.value)}></input>\n                    <span>Random</span>\n                </label>\n            </div>\n            <div className=\"form-check\">\n                <label className=\"form-check-label\">\n                    <input type=\"radio\" className=\"form-check-input\" name=\"optionsRadios\" id=\"optionsRadios2\" value=\"categories\"\n                    onChange={(e) => setCheckView(e.target.value)}></input>\n                    <span>From categories</span>\n                </label>\n            </div>\n\n            {checkView === \"categories\" &&  <Categories categories={categories} onCategoryClicked={({innerHTML})=>setActiveCategory([innerHTML])}/>}\n\n            <div className=\"form-check\">\n                <label className=\"form-check-label\">\n                    <input type=\"radio\" className=\"form-check-input\" name=\"optionsRadios\" id=\"optionsRadios3\" value=\"search\"\n                    onChange={(e) => setCheckView(e.target.value)}></input>\n                    <span>Search</span>\n                </label>\n            </div>\n\n            {checkView === \"search\" &&  <Search handleChange={(label) => setLabel(label)}/>}\n\n            <button onClick={fetchJoke}>\n                Get a joke\n            </button>\n            <JokeBox joke={joke} activeCategory={activeCategory}/>\n        </div>        \n    );\n}\n\nexport default withService()(Jumbotron);\n\n","import App from './app';\n\nexport default App;","import React, { useState } from 'react';\nimport './app.css';\nimport SideBar from '../side-bar';\nimport Jumbotron from '../jumbotron';\nimport JokeBox from '../joke-box';\n\n\nimport './app.css';\n\nconst App = () => {           \n\n    return (\n        <div className=\"layout\">\n            <Jumbotron />\n            <SideBar />\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from './components/service-context';\nimport ChuckNorrisService from './services/chuckNorrisService';\nimport App from './components/app';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider value={new ChuckNorrisService()}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { getHoursAgo } from '../utils';\n\nexport default class ChuckNorrisService {\n\n    _apiBase = `https://api.chucknorris.io/jokes/`;\n\n    getResource = async (url) => {\n        const response = await fetch(`${this._apiBase}${url}`);\n        return await response.json();\n    }\n\n    _transformData = (response) => {\n        return {\n            id: response.id,\n            value: response.value,\n            hoursAgo: getHoursAgo(response.updated_at),\n            categories: response.categories,\n            url: response.url,\n            icon: response.icon_url\n        }\n    }\n\n\n    getCategories = async () => {\n        const res = await this.getResource('categories');\n        return res;            \n    }\n    \n    getRandomJoke = async () => {\n        const res = await this.getResource('random');\n        return this._transformData(res);\n    }\n\n    getJokeByCategory = async (category) => {\n        const res = await this.getResource(`random?category=${category}`);\n        return this._transformData(res);\n    }\n\n    getJokeBySearch = async (query) => {\n        const res = await this.getResource(`search?query=${query}`);\n        return this._transformData(res);\n    }\n\n}\n\n"],"sourceRoot":""}